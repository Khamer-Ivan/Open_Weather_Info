import requests
import math
import sqlite3 as sq

from datetime import datetime
from telebot import types

from config_data.config import WEATHER_KEY
from loader import bot
from structure import weather_image
from states.user_states import UserInfoState
from utils.wind_description import wind_info
from handlers.default_heandlers.weather_button import weather_button

now = datetime.now()


@bot.callback_query_handler(func=lambda call: call.data.endswith('5days'))
def start_message(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :param message:
    :return:
    """
    UserInfoState.five_days = 1
    bot.send_message(message.from_user.id,
                     '–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –¥–∞–º —Ç–µ–±–µ —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–≥–æ–¥–µ –Ω–∞ 5 –¥–Ω–µ–π.'
                     )


@bot.callback_query_handler(func=lambda call: call.data.endswith('now'))
def start_message(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :param message:
    :return: None
    """
    UserInfoState.day = 1
    bot.send_message(message.from_user.id,
                     '–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –¥–∞–º —Ç–µ–±–µ —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–≥–æ–¥–µ.'
                     )


@bot.message_handler()
def get_weather(message: types.Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,
    –∏ –≤—ã–¥–∞—é—â–∞—è —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–≥–æ–¥–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    :param message:
    :return: None
    """
    if UserInfoState.day == 1:
        try:
            city_info = requests.get(
                                     f'https://api.openweathermap.org/data/2.5/weather?'
                                     f'q={message.text}&appid={WEATHER_KEY}&units=metric'
                                     )
            city_data = city_info.json()

            city = city_data['name']
            cur_temp = city_data['main']['temp']
            humidity = city_data['main']['humidity']
            pressure = city_data['main']['pressure']
            wind_speed = city_data['wind']['speed']
            wind_deg = city_data['wind']['deg']
            sunrise = datetime.fromtimestamp(city_data['sys']['sunrise'])
            sunset = datetime.fromtimestamp(city_data['sys']['sunset'])
            weather_descr = city_data['weather'][0]['main']
            day_long = sunset - sunrise
            wind_side = wind_info(wind_deg)

            if weather_descr in weather_image:
                description = weather_image[weather_descr]
            else:
                description = ''

            bot.send_message(message.from_user.id,
                             f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:'
                             f'\n'
                             f'\nüîπ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(cur_temp)}C¬∞ {description}'
                             f'\nüîπ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %'
                             f'\nüîπ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.'
                             f'\nüîπ –í–µ—Ç–µ—Ä {wind_side}, {wind_speed} –º/c'
                             f'\nüîπ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise}'
                             f'\nüîπ –ó–∞–∫–∞—Ç: {sunset}'
                             f'\nüîπ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è: {day_long}'
                             f'\n'
                             f'\nüòä –•–û–†–û–®–ï–ì–û –î–ù–Ø'
                             )
            UserInfoState.day = 0
            with sq.connect('weather.db') as con:
                cur = con.cursor()
                text = f'–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city}'
                cur.execute('INSERT INTO weather VALUES(?,?,?,?);',
                            (
                             message.from_user.id,
                             message.from_user.full_name,
                             text,
                             now.strftime("%Y-%m-%d %H:%M:%S")
                            )
                            )
            weather_button(message)

        except Exception:
            bot.send_message(message.from_user.id, 'üìù–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞.üìù')
    elif UserInfoState.five_days == 1:
        try:
            city = requests.get(
                                f'http://api.openweathermap.org/geo/1.0/direct?'
                                f'q={message.text}&limit=1&appid={WEATHER_KEY}'
                                )

            city_geo = city.json()

            city_name = city_geo[0]['local_names']['ru']
            lat = city_geo[0]['lat']
            lon = city_geo[0]['lon']

            weather_for_week(city_name, lat, lon, message)
        except Exception:
            bot.send_message(message.from_user.id, 'üìù–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞.üìù')


def weather_for_week(city, lat, lon, message: types.Message) -> None:
    """
        –§—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã, –∏ –ø–µ—Ä–µ–¥–∞—é—â–∞—è –∏—Ö
        –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
        :param city: –ì–æ—Ä–æ–¥
        :param lat: –®–∏—Ä–æ—Ç–∞
        :param lon: –î–æ–ª–≥–æ—Ç–∞
        :param message:
        :return: None
        """
    try:
        weather_list = list()
        weekly_weather = requests.get(
            f'http://api.openweathermap.org/data/2.5/forecast?'
            f'lat={lat}&lon={lon}&appid={WEATHER_KEY}&units=metric'
        )
        weather_data = weekly_weather.json()
        weather_list.append('–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {} –Ω–∞ 5 –¥–Ω–µ–π'.format(city))
        need = weather_data['list']
        for day in range(0, len(need), 8):
            date = need[day]['dt_txt']
            temp = need[day]['main']['temp']
            temp_feels_like = need[day]['main']['feels_like']
            humidity = need[day]['main']['humidity']
            pressure = need[day]['main']['pressure']
            weather_descr = need[day]['weather'][0]['main']
            wind_speed = math.ceil(need[day]['wind']['speed'])
            wind_deg = need[day]['wind']['deg']
            wind_side = wind_info(wind_deg)

            if weather_descr in weather_image:
                description = weather_image[weather_descr]
            else:
                description = ''

            weather_list.append(
                                f'–ü–æ–≥–æ–¥–∞ –Ω–∞ {date}:'
                                f'\nüîπ–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temp)}C¬∞, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {int(temp_feels_like)}C¬∞ {description}'
                                f'\nüîπ–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.'
                                f'\nüîπ–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {humidity} %'
                                f'\nüîπ–í–µ—Ç–µ—Ä {wind_side} {wind_speed} –º/c'
                                )
        UserInfoState.five_days = 0
        [bot.send_message(message.from_user.id, day_info) for day_info in weather_list]
        with sq.connect('weather.db') as con:
            cur = con.cursor()
            text = f'–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ {city}'
            cur.execute('INSERT INTO weather VALUES(?,?,?,?);',
                        (
                            message.from_user.id,
                            message.from_user.full_name,
                            text,
                            now.strftime("%Y-%m-%d %H:%M:%S")
                        )
                        )
        weather_button(message)

    except Exception:
        bot.send_message(message.from_user.id, 'üìù–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞.üìù')
